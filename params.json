{
  "name": "Datium",
  "tagline": "The most flexible DataTime Package ever written in PHP",
  "body": "# Datium\r\n\r\n[![Join the chat at https://gitter.im/opencafe/datium](https://badges.gitter.im/opencafe/datium.svg)](https://gitter.im/opencafe/datium?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Build Status](https://travis-ci.org/opencafe/datium.svg?branch=master)](https://travis-ci.org/opencafe/datium)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/opencafe/datium/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/opencafe/datium/?branch=master)\r\n\r\nAwsome DateTime package ever written in PHP, with clean design pattern and generalization support in calendar and translation, which makes Datium powerful and simple.\r\n\r\n* Simplicity in code and logic\r\n* Expandable in every part\r\n\r\n# Installation\r\n\r\n## Via Composer\r\n\r\n```\r\ncomposer require opencafe/datium\r\n```\r\n\r\n## Manual\r\nJust require ```Datium.php``` in your project and use Datium namespace as following example:\r\n\r\n```js\r\nrequire_once 'src/Datium.php';\r\n\r\nuse OpenCafe\\Datium;\r\n\r\necho Datium::now()->get();\r\n```\r\n\r\n# Usage\r\nSimply get what you want:\r\n\r\nAs datium output\r\n\r\n```js\r\nDatium::now()->get(); // ex: 2016-01-01 00:00:00\r\n```\r\nOr working with date as simple as you need:\r\n\r\n```js\r\nDatium::now()->add('1 day')->get(); // ex: 2016-01-02 00:00:00\r\n```\r\n\r\n## Get\r\n\r\nGet Datium as DateTime PHP object:\r\n\r\n```js\r\nDatium::now()->object();\r\n```\r\n\r\nOr return it as simple date and time string:\r\n\r\n```js\r\nDatium::now()->get();\r\n```\r\n\r\nAnd even with custom PHP YMD [format](http://php.net/manual/en/function.date.php):\r\n\r\n```js\r\nDatium::now()->get( 'l jS F Y h:i:s A' );\r\n```\r\n\r\n\r\n## Create\r\nYou can also simply create new time:\r\n\r\n```js\r\nDatium::create( 2016, 1, 1, 12, 56, 13 )->get(); //ex: 2016-01-01 12:56:13\r\n```\r\n\r\n## Add Date\r\nThis method allow you add some year, month, day, hour, minute and second to current date.\r\n\r\n```js\r\n// If current date is 2016-01-01 00:00:00 then:\r\n\r\n// Add 3 years\r\nDatium::now()->add('3 year')->get();\r\n// output => 2019-01-01 00:00:00\r\n\r\n// Add one month\r\nDatium::now()->add('1 month')->get()\r\n// output => 2016-02-01 00:00:00\r\n\r\n// Add 1 year, 3 month and 2 days\r\nDatium::now()->add('1 year')\r\n             ->add('3 month')\r\n             ->add('2 day')\r\n             ->add('1 hour')\r\n             ->add('2 minute')\r\n             ->add('3 second')\r\n             ->get();\r\n// output => 2017-04-03 01:02:03\r\n\r\n```\r\n\r\n## Sub Date\r\nSub some year, month, day, hour, minute and second from current date.\r\n\r\n```js\r\n// If current date is 2016-01-01 00:00:00 then:\r\n\r\n\r\n// Sub 3 years\r\nDatium::now()->sub('3 year')->get();\r\n// output => 2013-01-01 00:00:00\r\n\r\n// Sub one month\r\nDatium::now()->sub('1 month')->get()\r\n// output => 2015-12-01 00:00:00\r\n\r\n// Sub 1 year, 3 month and 2 days\r\nDatium::now()->sub('1 year')\r\n             ->sub('3 month')\r\n             ->sub('2 day')\r\n             ->get();\r\n// output => 2014-09-29 00:00:00\r\n```\r\n\r\n## Leap year\r\nDefine leap year of current year with generalization support.\r\n\r\n\r\n```js\r\n// If current date was 2016\r\n\r\n// Is 2016 a leap year?\r\nDatium::now()->leap()->get();\r\n// output => FALSE\r\n\r\n// Is 2017 a leap year?\r\nDatium::now()->add('1 year')->leap()->get();\r\n// output => TRUE\r\n\r\nDatium::now()->to('hijri')->leap()->get();\r\n```\r\n\r\n## Get day of date\r\nThis method returns day of week or day of year with generalization support, you can add this feature to your custom calendars like other supported calendars in Datium.\r\n\r\n## Day of Year\r\nWhat the day is in current year:\r\n\r\n```js\r\n// If current date was 2015-09-03\r\n\r\nDatium::now()->dayOf()->year();\r\n// output => 246\r\n\r\n// Day of year to Gregorian\r\nDatium::now()->dayOf()->year();\r\n\r\n// Day of year to Jalali\r\nDatium::now()->to( 'jalali' )->dayOf()->year();\r\n\r\n// Day of year to Hijri\r\nDatium::now()->to( 'hijri' )->dayOf()->year();\r\n\r\n```\r\n\r\n## Day of Week\r\nWhat day of week is current day:\r\n\r\n```js\r\n\r\n// If current date 'll be 2015-09-09 Thursday\r\nDatium::now()->dayOf()->week();\r\n// output => 5\r\n\r\n// Day of week to Gregorian\r\nDatium::now()->dayOf()->week();\r\n\r\n// Day of week to Jalali\r\nDatium::now()->to( 'jalali' )->dayOf()->week();\r\n\r\n// Day of week to Hijri\r\nDatium::now()->to( 'hijri' )->dayOf()->week();\r\n\r\n```\r\n\r\n## Generalization\r\n\r\n### Calendar generalization\r\nDatium supports calendar generalization, you can add customized calendars to Datium and used them as it's own default calendars.\r\n\r\n```js\r\nDatium::create( 2015, 11, 9 )->to( 'jalali' )->get()\r\n//Convert Gregorian to Jalali calendar: 1394-08-19 00:00:00\r\n\r\nDatium::create( 2015, 11, 9 )->to( 'hijri' )->get()\r\n//Convert Gregorian to Hijri calendar: 1437-01-27 00:00:00\r\n\r\n```\r\n\r\nConvert all calendars which supported on Datium or event your customized calendars as simple as possible:\r\n\r\n```js\r\nDatium::create( 2015, 11, 9 )->from( 'jalali' )->to( 'gregorian' )->get();\r\n\r\nDatium::create( 2015, 11, 9 )->from( 'jalali' )->to( 'hijri' )->get();\r\n```\r\n\r\n### Translation Generalization\r\nGeneralization in translation is another Datium generalization support.\r\n\r\n```js\r\nDatium::create( 2016, 6, 25, 12, 0, 0 )->to( 'jalali' )->lang( 'fa' )->get('l jS F Y h:i:s A');\r\n// ex: شنبه ۵ تیر ۱۳۹۵ ۱۲:۰۰:۰۰ ب.ظ\r\n\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}